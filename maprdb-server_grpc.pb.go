// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package private_maprdb_go_client

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MapRDbServerClient is the client API for MapRDbServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MapRDbServerClient interface {
	// Ping RPC
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// Admin RPCs
	CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error)
	DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error)
	TableExists(ctx context.Context, in *TableExistsRequest, opts ...grpc.CallOption) (*TableExistsResponse, error)
	// CRUD RPCs
	InsertOrReplace(ctx context.Context, in *InsertOrReplaceRequest, opts ...grpc.CallOption) (*InsertOrReplaceResponse, error)
	FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error)
	Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (MapRDbServer_FindClient, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type mapRDbServerClient struct {
	cc grpc.ClientConnInterface
}

func NewMapRDbServerClient(cc grpc.ClientConnInterface) MapRDbServerClient {
	return &mapRDbServerClient{cc}
}

func (c *mapRDbServerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRDbServerClient) CreateTable(ctx context.Context, in *CreateTableRequest, opts ...grpc.CallOption) (*CreateTableResponse, error) {
	out := new(CreateTableResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/CreateTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRDbServerClient) DeleteTable(ctx context.Context, in *DeleteTableRequest, opts ...grpc.CallOption) (*DeleteTableResponse, error) {
	out := new(DeleteTableResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/DeleteTable", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRDbServerClient) TableExists(ctx context.Context, in *TableExistsRequest, opts ...grpc.CallOption) (*TableExistsResponse, error) {
	out := new(TableExistsResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/TableExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRDbServerClient) InsertOrReplace(ctx context.Context, in *InsertOrReplaceRequest, opts ...grpc.CallOption) (*InsertOrReplaceResponse, error) {
	out := new(InsertOrReplaceResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/InsertOrReplace", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRDbServerClient) FindById(ctx context.Context, in *FindByIdRequest, opts ...grpc.CallOption) (*FindByIdResponse, error) {
	out := new(FindByIdResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/FindById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRDbServerClient) Find(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (MapRDbServer_FindClient, error) {
	stream, err := c.cc.NewStream(ctx, &MapRDbServer_ServiceDesc.Streams[0], "/com.mapr.data.db.MapRDbServer/Find", opts...)
	if err != nil {
		return nil, err
	}
	x := &mapRDbServerFindClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type MapRDbServer_FindClient interface {
	Recv() (*FindResponse, error)
	grpc.ClientStream
}

type mapRDbServerFindClient struct {
	grpc.ClientStream
}

func (x *mapRDbServerFindClient) Recv() (*FindResponse, error) {
	m := new(FindResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *mapRDbServerClient) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapRDbServerClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/com.mapr.data.db.MapRDbServer/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MapRDbServerServer is the server API for MapRDbServer service.
// All implementations must embed UnimplementedMapRDbServerServer
// for forward compatibility
type MapRDbServerServer interface {
	// Ping RPC
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// Admin RPCs
	CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error)
	DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error)
	TableExists(context.Context, *TableExistsRequest) (*TableExistsResponse, error)
	// CRUD RPCs
	InsertOrReplace(context.Context, *InsertOrReplaceRequest) (*InsertOrReplaceResponse, error)
	FindById(context.Context, *FindByIdRequest) (*FindByIdResponse, error)
	Find(*FindRequest, MapRDbServer_FindServer) error
	Update(context.Context, *UpdateRequest) (*UpdateResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	mustEmbedUnimplementedMapRDbServerServer()
}

// UnimplementedMapRDbServerServer must be embedded to have forward compatible implementations.
type UnimplementedMapRDbServerServer struct {
}

func (UnimplementedMapRDbServerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedMapRDbServerServer) CreateTable(context.Context, *CreateTableRequest) (*CreateTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTable not implemented")
}
func (UnimplementedMapRDbServerServer) DeleteTable(context.Context, *DeleteTableRequest) (*DeleteTableResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTable not implemented")
}
func (UnimplementedMapRDbServerServer) TableExists(context.Context, *TableExistsRequest) (*TableExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableExists not implemented")
}
func (UnimplementedMapRDbServerServer) InsertOrReplace(context.Context, *InsertOrReplaceRequest) (*InsertOrReplaceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertOrReplace not implemented")
}
func (UnimplementedMapRDbServerServer) FindById(context.Context, *FindByIdRequest) (*FindByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindById not implemented")
}
func (UnimplementedMapRDbServerServer) Find(*FindRequest, MapRDbServer_FindServer) error {
	return status.Errorf(codes.Unimplemented, "method Find not implemented")
}
func (UnimplementedMapRDbServerServer) Update(context.Context, *UpdateRequest) (*UpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMapRDbServerServer) Delete(context.Context, *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMapRDbServerServer) mustEmbedUnimplementedMapRDbServerServer() {}

// UnsafeMapRDbServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MapRDbServerServer will
// result in compilation errors.
type UnsafeMapRDbServerServer interface {
	mustEmbedUnimplementedMapRDbServerServer()
}

func RegisterMapRDbServerServer(s grpc.ServiceRegistrar, srv MapRDbServerServer) {
	s.RegisterService(&MapRDbServer_ServiceDesc, srv)
}

func _MapRDbServer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRDbServer_CreateTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).CreateTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/CreateTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).CreateTable(ctx, req.(*CreateTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRDbServer_DeleteTable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).DeleteTable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/DeleteTable",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).DeleteTable(ctx, req.(*DeleteTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRDbServer_TableExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).TableExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/TableExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).TableExists(ctx, req.(*TableExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRDbServer_InsertOrReplace_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertOrReplaceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).InsertOrReplace(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/InsertOrReplace",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).InsertOrReplace(ctx, req.(*InsertOrReplaceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRDbServer_FindById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).FindById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/FindById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).FindById(ctx, req.(*FindByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRDbServer_Find_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MapRDbServerServer).Find(m, &mapRDbServerFindServer{stream})
}

type MapRDbServer_FindServer interface {
	Send(*FindResponse) error
	grpc.ServerStream
}

type mapRDbServerFindServer struct {
	grpc.ServerStream
}

func (x *mapRDbServerFindServer) Send(m *FindResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _MapRDbServer_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MapRDbServer_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapRDbServerServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.mapr.data.db.MapRDbServer/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapRDbServerServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MapRDbServer_ServiceDesc is the grpc.ServiceDesc for MapRDbServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MapRDbServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "com.mapr.data.db.MapRDbServer",
	HandlerType: (*MapRDbServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _MapRDbServer_Ping_Handler,
		},
		{
			MethodName: "CreateTable",
			Handler:    _MapRDbServer_CreateTable_Handler,
		},
		{
			MethodName: "DeleteTable",
			Handler:    _MapRDbServer_DeleteTable_Handler,
		},
		{
			MethodName: "TableExists",
			Handler:    _MapRDbServer_TableExists_Handler,
		},
		{
			MethodName: "InsertOrReplace",
			Handler:    _MapRDbServer_InsertOrReplace_Handler,
		},
		{
			MethodName: "FindById",
			Handler:    _MapRDbServer_FindById_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MapRDbServer_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MapRDbServer_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Find",
			Handler:       _MapRDbServer_Find_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "maprdb-server.proto",
}

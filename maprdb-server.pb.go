// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0-devel
// 	protoc        v3.14.0
// source: maprdb-server.proto

package private_maprdb_go_client

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//*
// RPC response error codes. POSIX error codes are used where appropriate.
//
// Extended error codes, those that can not be mapped to a POSIX error code, begins at 256.
type ErrorCode int32

const (
	//*
	// No error, operation completed successfully.
	ErrorCode_NO_ERROR ErrorCode = 0
	//*
	// Specified table does not exist
	ErrorCode_TABLE_NOT_FOUND ErrorCode = 2
	//*
	// An I/O error occurred on the server(s)
	ErrorCode_IO_ERROR ErrorCode = 5
	//*
	// The operation resulted in server(s) running out of memory
	ErrorCode_OUT_OF_MEMORY ErrorCode = 12
	//*
	// User does not have sufficient permission to execute the operation.
	ErrorCode_ACCESS_DENIED ErrorCode = 13
	//*
	// The specified table already exists.
	ErrorCode_TABLE_ALREADY_EXISTS ErrorCode = 17
	//*
	// One or more request parameter was invalid.
	// This error code should be used whenever a request parameter was unrecognized or outside a valid domain.
	// For example, an unrecognized enum value was supplied for InsertMode.
	ErrorCode_INVALID_ARGUMENT ErrorCode = 22
	//*
	// Requested operation is not supported by this server.
	// This error code should be used if a known, valid operation is not supported by the current service.
	ErrorCode_UNSUPPORTED_OPERATION ErrorCode = 38
	//*
	// Catch-all for all undefined errors on server.
	ErrorCode_UNKNOWN_ERROR ErrorCode = 256
	//
	// Extended error codes.
	//
	// TODO: renumber the error codes before release
	//
	ErrorCode_UNKNOWN_PAYLOAD_ENCODING ErrorCode = 260 // specified payload encoding is not supported
	ErrorCode_CLUSTER_NOT_FOUND        ErrorCode = 270 // specified cluster does not exist
	ErrorCode_PATH_NOT_FOUND           ErrorCode = 271 // parent path of the specified table does not exist
	ErrorCode_DOCUMENT_ALREADY_EXISTS  ErrorCode = 280 // a document with the specified _id already exist in the store
	ErrorCode_DOCUMENT_NOT_FOUND       ErrorCode = 281 // a document with the specified _id wasn't found in the store
	ErrorCode_ENCODING_ERROR           ErrorCode = 290 // an error occurred while encoding an OJAI object
	ErrorCode_DECODING_ERROR           ErrorCode = 291 // the supplied OJAI object could not be decoded
	ErrorCode_ILLEGAL_MUTATION         ErrorCode = 292 // A mutation operation could not be applied
)

// Enum value maps for ErrorCode.
var (
	ErrorCode_name = map[int32]string{
		0:   "NO_ERROR",
		2:   "TABLE_NOT_FOUND",
		5:   "IO_ERROR",
		12:  "OUT_OF_MEMORY",
		13:  "ACCESS_DENIED",
		17:  "TABLE_ALREADY_EXISTS",
		22:  "INVALID_ARGUMENT",
		38:  "UNSUPPORTED_OPERATION",
		256: "UNKNOWN_ERROR",
		260: "UNKNOWN_PAYLOAD_ENCODING",
		270: "CLUSTER_NOT_FOUND",
		271: "PATH_NOT_FOUND",
		280: "DOCUMENT_ALREADY_EXISTS",
		281: "DOCUMENT_NOT_FOUND",
		290: "ENCODING_ERROR",
		291: "DECODING_ERROR",
		292: "ILLEGAL_MUTATION",
	}
	ErrorCode_value = map[string]int32{
		"NO_ERROR":                 0,
		"TABLE_NOT_FOUND":          2,
		"IO_ERROR":                 5,
		"OUT_OF_MEMORY":            12,
		"ACCESS_DENIED":            13,
		"TABLE_ALREADY_EXISTS":     17,
		"INVALID_ARGUMENT":         22,
		"UNSUPPORTED_OPERATION":    38,
		"UNKNOWN_ERROR":            256,
		"UNKNOWN_PAYLOAD_ENCODING": 260,
		"CLUSTER_NOT_FOUND":        270,
		"PATH_NOT_FOUND":           271,
		"DOCUMENT_ALREADY_EXISTS":  280,
		"DOCUMENT_NOT_FOUND":       281,
		"ENCODING_ERROR":           290,
		"DECODING_ERROR":           291,
		"ILLEGAL_MUTATION":         292,
	}
)

func (x ErrorCode) Enum() *ErrorCode {
	p := new(ErrorCode)
	*p = x
	return p
}

func (x ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_maprdb_server_proto_enumTypes[0].Descriptor()
}

func (ErrorCode) Type() protoreflect.EnumType {
	return &file_maprdb_server_proto_enumTypes[0]
}

func (x ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ErrorCode.Descriptor instead.
func (ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{0}
}

//*
// ENUM indicating the encoding scheme of the OJAI objects in RPC request/response.
// Currently only JSON encoding is supported.
type PayloadEncoding int32

const (
	//*
	// Invalid, unknown encoding
	PayloadEncoding_UNKNOWN_ENCODING PayloadEncoding = 0
	//*
	// Payload is encoded as JSON string
	PayloadEncoding_JSON_ENCODING PayloadEncoding = 1
)

// Enum value maps for PayloadEncoding.
var (
	PayloadEncoding_name = map[int32]string{
		0: "UNKNOWN_ENCODING",
		1: "JSON_ENCODING",
	}
	PayloadEncoding_value = map[string]int32{
		"UNKNOWN_ENCODING": 0,
		"JSON_ENCODING":    1,
	}
)

func (x PayloadEncoding) Enum() *PayloadEncoding {
	p := new(PayloadEncoding)
	*p = x
	return p
}

func (x PayloadEncoding) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PayloadEncoding) Descriptor() protoreflect.EnumDescriptor {
	return file_maprdb_server_proto_enumTypes[1].Descriptor()
}

func (PayloadEncoding) Type() protoreflect.EnumType {
	return &file_maprdb_server_proto_enumTypes[1]
}

func (x PayloadEncoding) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PayloadEncoding.Descriptor instead.
func (PayloadEncoding) EnumDescriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{1}
}

type InsertMode int32

const (
	//*
	// Invalid, unknown mode
	InsertMode_UNKNOWN_MODE InsertMode = 0
	//*
	// Insert this document WHETHER OR NOT a document with the same _id exist in the store
	InsertMode_INSERT_OR_REPLACE InsertMode = 1
	//*
	// Insert this document ONLY IF another document with the same _id DOES NOT exist in the store
	InsertMode_INSERT InsertMode = 2
	//*
	// Insert this document ONLY IF a document with the same _id EXISTS in the store
	InsertMode_REPLACE InsertMode = 3
)

// Enum value maps for InsertMode.
var (
	InsertMode_name = map[int32]string{
		0: "UNKNOWN_MODE",
		1: "INSERT_OR_REPLACE",
		2: "INSERT",
		3: "REPLACE",
	}
	InsertMode_value = map[string]int32{
		"UNKNOWN_MODE":      0,
		"INSERT_OR_REPLACE": 1,
		"INSERT":            2,
		"REPLACE":           3,
	}
)

func (x InsertMode) Enum() *InsertMode {
	p := new(InsertMode)
	*p = x
	return p
}

func (x InsertMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (InsertMode) Descriptor() protoreflect.EnumDescriptor {
	return file_maprdb_server_proto_enumTypes[2].Descriptor()
}

func (InsertMode) Type() protoreflect.EnumType {
	return &file_maprdb_server_proto_enumTypes[2]
}

func (x InsertMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use InsertMode.Descriptor instead.
func (InsertMode) EnumDescriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{2}
}

type FindResponseType int32

const (
	//*
	// Invalid, unknown type
	FindResponseType_UNKNOWN_TYPE FindResponseType = 0
	//*
	// Indicates that the current response contains a QueryResult Document
	FindResponseType_RESULT_DOCUMENT FindResponseType = 1
	//*
	// Indicates that the current response contains a Query plan
	FindResponseType_QUERY_PLAN FindResponseType = 2
)

// Enum value maps for FindResponseType.
var (
	FindResponseType_name = map[int32]string{
		0: "UNKNOWN_TYPE",
		1: "RESULT_DOCUMENT",
		2: "QUERY_PLAN",
	}
	FindResponseType_value = map[string]int32{
		"UNKNOWN_TYPE":    0,
		"RESULT_DOCUMENT": 1,
		"QUERY_PLAN":      2,
	}
)

func (x FindResponseType) Enum() *FindResponseType {
	p := new(FindResponseType)
	*p = x
	return p
}

func (x FindResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FindResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_maprdb_server_proto_enumTypes[3].Descriptor()
}

func (FindResponseType) Type() protoreflect.EnumType {
	return &file_maprdb_server_proto_enumTypes[3]
}

func (x FindResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FindResponseType.Descriptor instead.
func (FindResponseType) EnumDescriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{3}
}

//*
// Protobuf message that encapsulates RPC operation error, if any.
// Each RPC response should include RpcError message, with `NO_ERROR` indicating success
type RpcError struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// Error code for the RPC. `NO_ERROR` indicates RPC completed successfully
	ErrCode ErrorCode `protobuf:"varint,1,opt,name=err_code,json=errCode,proto3,enum=com.mapr.data.db.ErrorCode" json:"err_code,omitempty"`
	//*
	// NULL if `err` is `NO_ERROR`
	ErrorMessage string `protobuf:"bytes,2,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
	//*
	// NULL if `err` is `NO_ERROR`
	JavaStackTrace string `protobuf:"bytes,3,opt,name=java_stack_trace,json=javaStackTrace,proto3" json:"java_stack_trace,omitempty"`
}

func (x *RpcError) Reset() {
	*x = RpcError{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RpcError) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RpcError) ProtoMessage() {}

func (x *RpcError) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RpcError.ProtoReflect.Descriptor instead.
func (*RpcError) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{0}
}

func (x *RpcError) GetErrCode() ErrorCode {
	if x != nil {
		return x.ErrCode
	}
	return ErrorCode_NO_ERROR
}

func (x *RpcError) GetErrorMessage() string {
	if x != nil {
		return x.ErrorMessage
	}
	return ""
}

func (x *RpcError) GetJavaStackTrace() string {
	if x != nil {
		return x.JavaStackTrace
	}
	return ""
}

type PingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingRequest) Reset() {
	*x = PingRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingRequest) ProtoMessage() {}

func (x *PingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingRequest.ProtoReflect.Descriptor instead.
func (*PingRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{1}
}

type PingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PingResponse) Reset() {
	*x = PingResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PingResponse) ProtoMessage() {}

func (x *PingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PingResponse.ProtoReflect.Descriptor instead.
func (*PingResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{2}
}

type CreateTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath string `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
}

func (x *CreateTableRequest) Reset() {
	*x = CreateTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableRequest) ProtoMessage() {}

func (x *CreateTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableRequest.ProtoReflect.Descriptor instead.
func (*CreateTableRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{3}
}

func (x *CreateTableRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

type CreateTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// `NO_ERROR` - if the table was created successfully,
	// `TABLE_ALREADY_EXISTS` - if a table with the same path already exists
	Error *RpcError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *CreateTableResponse) Reset() {
	*x = CreateTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreateTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateTableResponse) ProtoMessage() {}

func (x *CreateTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateTableResponse.ProtoReflect.Descriptor instead.
func (*CreateTableResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{4}
}

func (x *CreateTableResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteTableRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath string `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
}

func (x *DeleteTableRequest) Reset() {
	*x = DeleteTableRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableRequest) ProtoMessage() {}

func (x *DeleteTableRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableRequest.ProtoReflect.Descriptor instead.
func (*DeleteTableRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{5}
}

func (x *DeleteTableRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

type DeleteTableResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// `NO_ERROR` - if the table exists
	// `TABLE_NOT_FOUND` - if the table does not exist
	Error *RpcError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteTableResponse) Reset() {
	*x = DeleteTableResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteTableResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteTableResponse) ProtoMessage() {}

func (x *DeleteTableResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteTableResponse.ProtoReflect.Descriptor instead.
func (*DeleteTableResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{6}
}

func (x *DeleteTableResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

type TableExistsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath string `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
}

func (x *TableExistsRequest) Reset() {
	*x = TableExistsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableExistsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableExistsRequest) ProtoMessage() {}

func (x *TableExistsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableExistsRequest.ProtoReflect.Descriptor instead.
func (*TableExistsRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{7}
}

func (x *TableExistsRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

type TableExistsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// `NO_ERROR` - if the table exists
	// `TABLE_NOT_FOUND` - if the table does not exist
	Error *RpcError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *TableExistsResponse) Reset() {
	*x = TableExistsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableExistsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableExistsResponse) ProtoMessage() {}

func (x *TableExistsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableExistsResponse.ProtoReflect.Descriptor instead.
func (*TableExistsResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{8}
}

func (x *TableExistsResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

type InsertOrReplaceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath       string          `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
	InsertMode      InsertMode      `protobuf:"varint,2,opt,name=insert_mode,json=insertMode,proto3,enum=com.mapr.data.db.InsertMode" json:"insert_mode,omitempty"`
	PayloadEncoding PayloadEncoding `protobuf:"varint,3,opt,name=payload_encoding,json=payloadEncoding,proto3,enum=com.mapr.data.db.PayloadEncoding" json:"payload_encoding,omitempty"`
	// Types that are assignable to Condition:
	//	*InsertOrReplaceRequest_JsonCondition
	Condition isInsertOrReplaceRequest_Condition `protobuf_oneof:"condition"`
	// Types that are assignable to Data:
	//	*InsertOrReplaceRequest_JsonDocument
	Data isInsertOrReplaceRequest_Data `protobuf_oneof:"data"`
}

func (x *InsertOrReplaceRequest) Reset() {
	*x = InsertOrReplaceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertOrReplaceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertOrReplaceRequest) ProtoMessage() {}

func (x *InsertOrReplaceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertOrReplaceRequest.ProtoReflect.Descriptor instead.
func (*InsertOrReplaceRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{9}
}

func (x *InsertOrReplaceRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

func (x *InsertOrReplaceRequest) GetInsertMode() InsertMode {
	if x != nil {
		return x.InsertMode
	}
	return InsertMode_UNKNOWN_MODE
}

func (x *InsertOrReplaceRequest) GetPayloadEncoding() PayloadEncoding {
	if x != nil {
		return x.PayloadEncoding
	}
	return PayloadEncoding_UNKNOWN_ENCODING
}

func (m *InsertOrReplaceRequest) GetCondition() isInsertOrReplaceRequest_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *InsertOrReplaceRequest) GetJsonCondition() string {
	if x, ok := x.GetCondition().(*InsertOrReplaceRequest_JsonCondition); ok {
		return x.JsonCondition
	}
	return ""
}

func (m *InsertOrReplaceRequest) GetData() isInsertOrReplaceRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *InsertOrReplaceRequest) GetJsonDocument() string {
	if x, ok := x.GetData().(*InsertOrReplaceRequest_JsonDocument); ok {
		return x.JsonDocument
	}
	return ""
}

type isInsertOrReplaceRequest_Condition interface {
	isInsertOrReplaceRequest_Condition()
}

type InsertOrReplaceRequest_JsonCondition struct {
	//*
	// <b>[Optional]</b><p/>
	// Contains JSON encoded OJAI QueryCondition when payload_encoding is `JSON_ENCODING`.<p/>
	// This should only be specified if the `insert_mode` == REPLACE
	JsonCondition string `protobuf:"bytes,4,opt,name=json_condition,json=jsonCondition,proto3,oneof"`
}

func (*InsertOrReplaceRequest_JsonCondition) isInsertOrReplaceRequest_Condition() {}

type isInsertOrReplaceRequest_Data interface {
	isInsertOrReplaceRequest_Data()
}

type InsertOrReplaceRequest_JsonDocument struct {
	//*
	// <b>[Required]</b><p/>
	// Contains JSON encoded OJAI Document if the payload_encoding is `JSON_ENCODING`
	JsonDocument string `protobuf:"bytes,30,opt,name=json_document,json=jsonDocument,proto3,oneof"`
}

func (*InsertOrReplaceRequest_JsonDocument) isInsertOrReplaceRequest_Data() {}

type InsertOrReplaceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *RpcError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *InsertOrReplaceResponse) Reset() {
	*x = InsertOrReplaceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InsertOrReplaceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InsertOrReplaceResponse) ProtoMessage() {}

func (x *InsertOrReplaceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InsertOrReplaceResponse.ProtoReflect.Descriptor instead.
func (*InsertOrReplaceResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{10}
}

func (x *InsertOrReplaceResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

type FindByIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath       string          `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
	PayloadEncoding PayloadEncoding `protobuf:"varint,2,opt,name=payload_encoding,json=payloadEncoding,proto3,enum=com.mapr.data.db.PayloadEncoding" json:"payload_encoding,omitempty"`
	//*
	// <b>[Optional]</b><p/>
	// List of OJAI FieldPaths that should be included in the returned document
	Projections []string `protobuf:"bytes,3,rep,name=projections,proto3" json:"projections,omitempty"`
	// Types that are assignable to Condition:
	//	*FindByIdRequest_JsonCondition
	Condition isFindByIdRequest_Condition `protobuf_oneof:"condition"`
	// Types that are assignable to Document:
	//	*FindByIdRequest_JsonDocument
	Document isFindByIdRequest_Document `protobuf_oneof:"document"`
}

func (x *FindByIdRequest) Reset() {
	*x = FindByIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIdRequest) ProtoMessage() {}

func (x *FindByIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIdRequest.ProtoReflect.Descriptor instead.
func (*FindByIdRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{11}
}

func (x *FindByIdRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

func (x *FindByIdRequest) GetPayloadEncoding() PayloadEncoding {
	if x != nil {
		return x.PayloadEncoding
	}
	return PayloadEncoding_UNKNOWN_ENCODING
}

func (x *FindByIdRequest) GetProjections() []string {
	if x != nil {
		return x.Projections
	}
	return nil
}

func (m *FindByIdRequest) GetCondition() isFindByIdRequest_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *FindByIdRequest) GetJsonCondition() string {
	if x, ok := x.GetCondition().(*FindByIdRequest_JsonCondition); ok {
		return x.JsonCondition
	}
	return ""
}

func (m *FindByIdRequest) GetDocument() isFindByIdRequest_Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (x *FindByIdRequest) GetJsonDocument() string {
	if x, ok := x.GetDocument().(*FindByIdRequest_JsonDocument); ok {
		return x.JsonDocument
	}
	return ""
}

type isFindByIdRequest_Condition interface {
	isFindByIdRequest_Condition()
}

type FindByIdRequest_JsonCondition struct {
	//*
	// <b>[Optional]</b><p/>
	// Contains JSON encoded OJAI QueryCondition when payload_encoding is `JSON_ENCODING`.<p/>
	JsonCondition string `protobuf:"bytes,4,opt,name=json_condition,json=jsonCondition,proto3,oneof"`
}

func (*FindByIdRequest_JsonCondition) isFindByIdRequest_Condition() {}

type isFindByIdRequest_Document interface {
	isFindByIdRequest_Document()
}

type FindByIdRequest_JsonDocument struct {
	//*
	// <b>[Required]</b><p/>
	// Contains JSON encoded OJAI Document with `_id` field when payload_encoding is `JSON_ENCODING`.<p/>
	JsonDocument string `protobuf:"bytes,5,opt,name=json_document,json=jsonDocument,proto3,oneof"`
}

func (*FindByIdRequest_JsonDocument) isFindByIdRequest_Document() {}

type FindByIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// `NO_ERROR` - if a document with the specified `_id` was found
	// `DOCUMENT_NOT_FOUND` - if the document with the specified `_id` does not exist
	Error           *RpcError       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	PayloadEncoding PayloadEncoding `protobuf:"varint,2,opt,name=payload_encoding,json=payloadEncoding,proto3,enum=com.mapr.data.db.PayloadEncoding" json:"payload_encoding,omitempty"`
	// Types that are assignable to Data:
	//	*FindByIdResponse_JsonDocument
	Data isFindByIdResponse_Data `protobuf_oneof:"data"`
}

func (x *FindByIdResponse) Reset() {
	*x = FindByIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindByIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindByIdResponse) ProtoMessage() {}

func (x *FindByIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindByIdResponse.ProtoReflect.Descriptor instead.
func (*FindByIdResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{12}
}

func (x *FindByIdResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FindByIdResponse) GetPayloadEncoding() PayloadEncoding {
	if x != nil {
		return x.PayloadEncoding
	}
	return PayloadEncoding_UNKNOWN_ENCODING
}

func (m *FindByIdResponse) GetData() isFindByIdResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FindByIdResponse) GetJsonDocument() string {
	if x, ok := x.GetData().(*FindByIdResponse_JsonDocument); ok {
		return x.JsonDocument
	}
	return ""
}

type isFindByIdResponse_Data interface {
	isFindByIdResponse_Data()
}

type FindByIdResponse_JsonDocument struct {
	//*
	// <b>[Required]</b><p/>
	// Contains JSON encoded OJAI Document if the payload_encoding is `JSON_ENCODING`
	JsonDocument string `protobuf:"bytes,30,opt,name=json_document,json=jsonDocument,proto3,oneof"`
}

func (*FindByIdResponse_JsonDocument) isFindByIdResponse_Data() {}

type FindRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath        string          `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
	PayloadEncoding  PayloadEncoding `protobuf:"varint,2,opt,name=payload_encoding,json=payloadEncoding,proto3,enum=com.mapr.data.db.PayloadEncoding" json:"payload_encoding,omitempty"`
	IncludeQueryPlan bool            `protobuf:"varint,3,opt,name=include_query_plan,json=includeQueryPlan,proto3" json:"include_query_plan,omitempty"`
	// Types that are assignable to Data:
	//	*FindRequest_JsonQuery
	Data isFindRequest_Data `protobuf_oneof:"data"`
}

func (x *FindRequest) Reset() {
	*x = FindRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindRequest) ProtoMessage() {}

func (x *FindRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindRequest.ProtoReflect.Descriptor instead.
func (*FindRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{13}
}

func (x *FindRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

func (x *FindRequest) GetPayloadEncoding() PayloadEncoding {
	if x != nil {
		return x.PayloadEncoding
	}
	return PayloadEncoding_UNKNOWN_ENCODING
}

func (x *FindRequest) GetIncludeQueryPlan() bool {
	if x != nil {
		return x.IncludeQueryPlan
	}
	return false
}

func (m *FindRequest) GetData() isFindRequest_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FindRequest) GetJsonQuery() string {
	if x, ok := x.GetData().(*FindRequest_JsonQuery); ok {
		return x.JsonQuery
	}
	return ""
}

type isFindRequest_Data interface {
	isFindRequest_Data()
}

type FindRequest_JsonQuery struct {
	//*
	// <b>[Required]</b><p/>
	// Contains JSON encoded OJAI Query if the payload_encoding is `JSON_ENCODING`
	JsonQuery string `protobuf:"bytes,4,opt,name=json_query,json=jsonQuery,proto3,oneof"`
}

func (*FindRequest_JsonQuery) isFindRequest_Data() {}

//*
// Results of Find() RPCs are streamed to the clients, with each FindResponse containing
// one OJAI document. If the `include_query_plan` in FindRequest was set to true, the first
// FindResponse will contain the query plan instead of OJAI Document
type FindResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error           *RpcError       `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	PayloadEncoding PayloadEncoding `protobuf:"varint,2,opt,name=payload_encoding,json=payloadEncoding,proto3,enum=com.mapr.data.db.PayloadEncoding" json:"payload_encoding,omitempty"`
	//*
	// Indicates the type of this response
	Type FindResponseType `protobuf:"varint,3,opt,name=type,proto3,enum=com.mapr.data.db.FindResponseType" json:"type,omitempty"`
	// Types that are assignable to Data:
	//	*FindResponse_JsonResponse
	Data isFindResponse_Data `protobuf_oneof:"data"`
}

func (x *FindResponse) Reset() {
	*x = FindResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FindResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FindResponse) ProtoMessage() {}

func (x *FindResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FindResponse.ProtoReflect.Descriptor instead.
func (*FindResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{14}
}

func (x *FindResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *FindResponse) GetPayloadEncoding() PayloadEncoding {
	if x != nil {
		return x.PayloadEncoding
	}
	return PayloadEncoding_UNKNOWN_ENCODING
}

func (x *FindResponse) GetType() FindResponseType {
	if x != nil {
		return x.Type
	}
	return FindResponseType_UNKNOWN_TYPE
}

func (m *FindResponse) GetData() isFindResponse_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (x *FindResponse) GetJsonResponse() string {
	if x, ok := x.GetData().(*FindResponse_JsonResponse); ok {
		return x.JsonResponse
	}
	return ""
}

type isFindResponse_Data interface {
	isFindResponse_Data()
}

type FindResponse_JsonResponse struct {
	//*
	// Contains JSON encoded response if the payload_encoding is `JSON_ENCODING`
	JsonResponse string `protobuf:"bytes,30,opt,name=json_response,json=jsonResponse,proto3,oneof"`
}

func (*FindResponse_JsonResponse) isFindResponse_Data() {}

type UpdateRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath       string          `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
	PayloadEncoding PayloadEncoding `protobuf:"varint,2,opt,name=payload_encoding,json=payloadEncoding,proto3,enum=com.mapr.data.db.PayloadEncoding" json:"payload_encoding,omitempty"`
	// Types that are assignable to Document:
	//	*UpdateRequest_JsonDocument
	Document isUpdateRequest_Document `protobuf_oneof:"document"`
	// Types that are assignable to Condition:
	//	*UpdateRequest_JsonCondition
	Condition isUpdateRequest_Condition `protobuf_oneof:"condition"`
	// Types that are assignable to Mutation:
	//	*UpdateRequest_JsonMutation
	Mutation isUpdateRequest_Mutation `protobuf_oneof:"mutation"`
}

func (x *UpdateRequest) Reset() {
	*x = UpdateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateRequest) ProtoMessage() {}

func (x *UpdateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateRequest.ProtoReflect.Descriptor instead.
func (*UpdateRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{15}
}

func (x *UpdateRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

func (x *UpdateRequest) GetPayloadEncoding() PayloadEncoding {
	if x != nil {
		return x.PayloadEncoding
	}
	return PayloadEncoding_UNKNOWN_ENCODING
}

func (m *UpdateRequest) GetDocument() isUpdateRequest_Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (x *UpdateRequest) GetJsonDocument() string {
	if x, ok := x.GetDocument().(*UpdateRequest_JsonDocument); ok {
		return x.JsonDocument
	}
	return ""
}

func (m *UpdateRequest) GetCondition() isUpdateRequest_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *UpdateRequest) GetJsonCondition() string {
	if x, ok := x.GetCondition().(*UpdateRequest_JsonCondition); ok {
		return x.JsonCondition
	}
	return ""
}

func (m *UpdateRequest) GetMutation() isUpdateRequest_Mutation {
	if m != nil {
		return m.Mutation
	}
	return nil
}

func (x *UpdateRequest) GetJsonMutation() string {
	if x, ok := x.GetMutation().(*UpdateRequest_JsonMutation); ok {
		return x.JsonMutation
	}
	return ""
}

type isUpdateRequest_Document interface {
	isUpdateRequest_Document()
}

type UpdateRequest_JsonDocument struct {
	//*
	// <b>[Required]</b><p/>
	// Contains JSON encoded OJAI Document with `_id` field when payload_encoding is `JSON_ENCODING`.<p/>
	JsonDocument string `protobuf:"bytes,3,opt,name=json_document,json=jsonDocument,proto3,oneof"`
}

func (*UpdateRequest_JsonDocument) isUpdateRequest_Document() {}

type isUpdateRequest_Condition interface {
	isUpdateRequest_Condition()
}

type UpdateRequest_JsonCondition struct {
	//*
	// <b>[Optional]</b><p/>
	// Contains JSON encoded OJAI QueryCondition when payload_encoding is `JSON_ENCODING`.<p/>
	JsonCondition string `protobuf:"bytes,4,opt,name=json_condition,json=jsonCondition,proto3,oneof"`
}

func (*UpdateRequest_JsonCondition) isUpdateRequest_Condition() {}

type isUpdateRequest_Mutation interface {
	isUpdateRequest_Mutation()
}

type UpdateRequest_JsonMutation struct {
	//*
	// <b>[Required]</b><p/>
	// Contains JSON encoded OJAI DocumentMutation when payload_encoding is `JSON_ENCODING`.<p/>
	JsonMutation string `protobuf:"bytes,30,opt,name=json_mutation,json=jsonMutation,proto3,oneof"`
}

func (*UpdateRequest_JsonMutation) isUpdateRequest_Mutation() {}

type UpdateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// `NO_ERROR` - if a document was updated successfully
	// `DOCUMENT_NOT_FOUND` - if a document with specified `_id` does not exist or the specified condition
	//                        evaluated to 'false'.
	Error *RpcError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *UpdateResponse) Reset() {
	*x = UpdateResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResponse) ProtoMessage() {}

func (x *UpdateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResponse.ProtoReflect.Descriptor instead.
func (*UpdateResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{16}
}

func (x *UpdateResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

type DeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TablePath       string          `protobuf:"bytes,1,opt,name=table_path,json=tablePath,proto3" json:"table_path,omitempty"`
	PayloadEncoding PayloadEncoding `protobuf:"varint,2,opt,name=payload_encoding,json=payloadEncoding,proto3,enum=com.mapr.data.db.PayloadEncoding" json:"payload_encoding,omitempty"`
	// Types that are assignable to Condition:
	//	*DeleteRequest_JsonCondition
	Condition isDeleteRequest_Condition `protobuf_oneof:"condition"`
	// Types that are assignable to Document:
	//	*DeleteRequest_JsonDocument
	Document isDeleteRequest_Document `protobuf_oneof:"document"`
}

func (x *DeleteRequest) Reset() {
	*x = DeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteRequest) ProtoMessage() {}

func (x *DeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteRequest.ProtoReflect.Descriptor instead.
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{17}
}

func (x *DeleteRequest) GetTablePath() string {
	if x != nil {
		return x.TablePath
	}
	return ""
}

func (x *DeleteRequest) GetPayloadEncoding() PayloadEncoding {
	if x != nil {
		return x.PayloadEncoding
	}
	return PayloadEncoding_UNKNOWN_ENCODING
}

func (m *DeleteRequest) GetCondition() isDeleteRequest_Condition {
	if m != nil {
		return m.Condition
	}
	return nil
}

func (x *DeleteRequest) GetJsonCondition() string {
	if x, ok := x.GetCondition().(*DeleteRequest_JsonCondition); ok {
		return x.JsonCondition
	}
	return ""
}

func (m *DeleteRequest) GetDocument() isDeleteRequest_Document {
	if m != nil {
		return m.Document
	}
	return nil
}

func (x *DeleteRequest) GetJsonDocument() string {
	if x, ok := x.GetDocument().(*DeleteRequest_JsonDocument); ok {
		return x.JsonDocument
	}
	return ""
}

type isDeleteRequest_Condition interface {
	isDeleteRequest_Condition()
}

type DeleteRequest_JsonCondition struct {
	//*
	// <b>[Optional]</b><p/>
	// Contains JSON encoded OJAI QueryCondition when payload_encoding is `JSON_ENCODING`.<p/>
	JsonCondition string `protobuf:"bytes,3,opt,name=json_condition,json=jsonCondition,proto3,oneof"`
}

func (*DeleteRequest_JsonCondition) isDeleteRequest_Condition() {}

type isDeleteRequest_Document interface {
	isDeleteRequest_Document()
}

type DeleteRequest_JsonDocument struct {
	//*
	// <b>[Required]</b><p/>
	// Contains JSON encoded OJAI Document with `_id` field when payload_encoding is `JSON_ENCODING`.<p/>
	JsonDocument string `protobuf:"bytes,4,opt,name=json_document,json=jsonDocument,proto3,oneof"`
}

func (*DeleteRequest_JsonDocument) isDeleteRequest_Document() {}

type DeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	//*
	// `NO_ERROR` - if a document was deleted successfully
	Error *RpcError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
}

func (x *DeleteResponse) Reset() {
	*x = DeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_maprdb_server_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteResponse) ProtoMessage() {}

func (x *DeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_maprdb_server_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteResponse.ProtoReflect.Descriptor instead.
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return file_maprdb_server_proto_rawDescGZIP(), []int{18}
}

func (x *DeleteResponse) GetError() *RpcError {
	if x != nil {
		return x.Error
	}
	return nil
}

var File_maprdb_server_proto protoreflect.FileDescriptor

var file_maprdb_server_proto_rawDesc = []byte{
	0x0a, 0x13, 0x6d, 0x61, 0x70, 0x72, 0x64, 0x62, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x22, 0x91, 0x01, 0x0a, 0x08, 0x52, 0x70, 0x63, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x72, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x07, 0x65, 0x72, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x23, 0x0a, 0x0d,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x12, 0x28, 0x0a, 0x10, 0x6a, 0x61, 0x76, 0x61, 0x5f, 0x73, 0x74, 0x61, 0x63, 0x6b, 0x5f,
	0x74, 0x72, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6a, 0x61, 0x76,
	0x61, 0x53, 0x74, 0x61, 0x63, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x22, 0x0d, 0x0a, 0x0b, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x0e, 0x0a, 0x0c, 0x50, 0x69,
	0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x0a, 0x12, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22,
	0x47, 0x0a, 0x13, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x12, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d,
	0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x47, 0x0a,
	0x13, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52,
	0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x33, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x22, 0x47, 0x0a, 0x13, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x22, 0xa9, 0x02, 0x0a, 0x16, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x3d,
	0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x52, 0x0a, 0x69, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4c, 0x0a,
	0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61,
	0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c,
	0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0e, 0x6a,
	0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6a,
	0x73, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61,
	0x22, 0x4b, 0x0a, 0x17, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x52, 0x70,
	0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0x89, 0x02,
	0x0a, 0x0f, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68,
	0x12, 0x4c, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x12, 0x27, 0x0a, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x6a, 0x73, 0x6f,
	0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a,
	0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0xc1, 0x01, 0x0a, 0x10, 0x46, 0x69,
	0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30,
	0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62,
	0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x4c, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x50, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70,
	0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25,
	0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x1e, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x6f, 0x63,
	0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd1, 0x01,
	0x0a, 0x0b, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x10,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70,
	0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f,
	0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2c, 0x0a, 0x12, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x5f, 0x70, 0x6c, 0x61, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x50, 0x6c, 0x61, 0x6e, 0x12, 0x1f, 0x0a, 0x0a, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09,
	0x6a, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x22, 0xf5, 0x01, 0x0a, 0x0c, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f,
	0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64,
	0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e,
	0x67, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69,
	0x6e, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x0d, 0x6a, 0x73,
	0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x18, 0x1e, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x98, 0x02, 0x0a, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x61,
	0x79, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x25, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12,
	0x27, 0x0a, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x25, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e,
	0x5f, 0x6d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x02, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x0a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x63,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x75, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x42, 0x0a, 0x0e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72,
	0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xe5, 0x01, 0x0a, 0x0d, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x4c, 0x0a, 0x10, 0x70, 0x61, 0x79,
	0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64,
	0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e,
	0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x0f, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45,
	0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x27, 0x0a, 0x0e, 0x6a, 0x73, 0x6f, 0x6e, 0x5f,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x25, 0x0a, 0x0d, 0x6a, 0x73, 0x6f, 0x6e, 0x5f, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0c, 0x6a, 0x73, 0x6f, 0x6e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0b, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x64, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x42, 0x0a, 0x0e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x30, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74,
	0x61, 0x2e, 0x64, 0x62, 0x2e, 0x52, 0x70, 0x63, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x2a, 0x85, 0x03, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4f, 0x5f, 0x45, 0x52, 0x52, 0x4f,
	0x52, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45,
	0x4d, 0x4f, 0x52, 0x59, 0x10, 0x0c, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x43, 0x43, 0x45, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x0d, 0x12, 0x18, 0x0a, 0x14, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54,
	0x53, 0x10, 0x11, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x41,
	0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x16, 0x12, 0x19, 0x0a, 0x15, 0x55, 0x4e, 0x53,
	0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x45, 0x44, 0x5f, 0x4f, 0x50, 0x45, 0x52, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x26, 0x12, 0x12, 0x0a, 0x0d, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f,
	0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x80, 0x02, 0x12, 0x1d, 0x0a, 0x18, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x5f, 0x50, 0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x5f, 0x45, 0x4e, 0x43, 0x4f,
	0x44, 0x49, 0x4e, 0x47, 0x10, 0x84, 0x02, 0x12, 0x16, 0x0a, 0x11, 0x43, 0x4c, 0x55, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x8e, 0x02, 0x12,
	0x13, 0x0a, 0x0e, 0x50, 0x41, 0x54, 0x48, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x8f, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54,
	0x5f, 0x41, 0x4c, 0x52, 0x45, 0x41, 0x44, 0x59, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x10,
	0x98, 0x02, 0x12, 0x17, 0x0a, 0x12, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x46, 0x4f, 0x55, 0x4e, 0x44, 0x10, 0x99, 0x02, 0x12, 0x13, 0x0a, 0x0e, 0x45,
	0x4e, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0xa2, 0x02,
	0x12, 0x13, 0x0a, 0x0e, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x45, 0x52, 0x52,
	0x4f, 0x52, 0x10, 0xa3, 0x02, 0x12, 0x15, 0x0a, 0x10, 0x49, 0x4c, 0x4c, 0x45, 0x47, 0x41, 0x4c,
	0x5f, 0x4d, 0x55, 0x54, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0xa4, 0x02, 0x2a, 0x3a, 0x0a, 0x0f,
	0x50, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x45, 0x6e, 0x63, 0x6f, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x14, 0x0a, 0x10, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x45, 0x4e, 0x43, 0x4f, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x45, 0x4e,
	0x43, 0x4f, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x2a, 0x4e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4e, 0x53, 0x45,
	0x52, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x52,
	0x45, 0x50, 0x4c, 0x41, 0x43, 0x45, 0x10, 0x03, 0x2a, 0x49, 0x0a, 0x10, 0x46, 0x69, 0x6e, 0x64,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x5f, 0x44, 0x4f, 0x43, 0x55, 0x4d, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x50, 0x4c, 0x41,
	0x4e, 0x10, 0x02, 0x32, 0x99, 0x06, 0x0a, 0x0c, 0x4d, 0x61, 0x70, 0x52, 0x44, 0x62, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x47, 0x0a, 0x04, 0x50, 0x69, 0x6e, 0x67, 0x12, 0x1d, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e,
	0x50, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x50,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a,
	0x0b, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61,
	0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x25, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x62, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x5c, 0x0a, 0x0b, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d,
	0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64,
	0x62, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x68, 0x0a, 0x0f, 0x49, 0x6e, 0x73, 0x65, 0x72,
	0x74, 0x4f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x28, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x49, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x4f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e,
	0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x4f, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x12, 0x53, 0x0a, 0x08, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x12, 0x21, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x22, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x42, 0x79, 0x49, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x49, 0x0a, 0x04, 0x46, 0x69, 0x6e, 0x64, 0x12, 0x1d,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64,
	0x62, 0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62,
	0x2e, 0x46, 0x69, 0x6e, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x30,
	0x01, 0x12, 0x4d, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63,
	0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x12, 0x4d, 0x0a, 0x06, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12, 0x1f, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x64, 0x62, 0x2e, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42,
	0x52, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x6d, 0x61, 0x70, 0x72, 0x2e, 0x64, 0x61, 0x74, 0x61,
	0x2e, 0x64, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x36, 0x6d, 0x61, 0x70,
	0x72, 0x2f, 0x70, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x2d, 0x6d, 0x61, 0x70, 0x72, 0x64, 0x62,
	0x2d, 0x67, 0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x3b, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x72, 0x64, 0x62, 0x5f, 0x67, 0x6f, 0x5f, 0x63, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_maprdb_server_proto_rawDescOnce sync.Once
	file_maprdb_server_proto_rawDescData = file_maprdb_server_proto_rawDesc
)

func file_maprdb_server_proto_rawDescGZIP() []byte {
	file_maprdb_server_proto_rawDescOnce.Do(func() {
		file_maprdb_server_proto_rawDescData = protoimpl.X.CompressGZIP(file_maprdb_server_proto_rawDescData)
	})
	return file_maprdb_server_proto_rawDescData
}

var file_maprdb_server_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_maprdb_server_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_maprdb_server_proto_goTypes = []interface{}{
	(ErrorCode)(0),                  // 0: com.mapr.data.db.ErrorCode
	(PayloadEncoding)(0),            // 1: com.mapr.data.db.PayloadEncoding
	(InsertMode)(0),                 // 2: com.mapr.data.db.InsertMode
	(FindResponseType)(0),           // 3: com.mapr.data.db.FindResponseType
	(*RpcError)(nil),                // 4: com.mapr.data.db.RpcError
	(*PingRequest)(nil),             // 5: com.mapr.data.db.PingRequest
	(*PingResponse)(nil),            // 6: com.mapr.data.db.PingResponse
	(*CreateTableRequest)(nil),      // 7: com.mapr.data.db.CreateTableRequest
	(*CreateTableResponse)(nil),     // 8: com.mapr.data.db.CreateTableResponse
	(*DeleteTableRequest)(nil),      // 9: com.mapr.data.db.DeleteTableRequest
	(*DeleteTableResponse)(nil),     // 10: com.mapr.data.db.DeleteTableResponse
	(*TableExistsRequest)(nil),      // 11: com.mapr.data.db.TableExistsRequest
	(*TableExistsResponse)(nil),     // 12: com.mapr.data.db.TableExistsResponse
	(*InsertOrReplaceRequest)(nil),  // 13: com.mapr.data.db.InsertOrReplaceRequest
	(*InsertOrReplaceResponse)(nil), // 14: com.mapr.data.db.InsertOrReplaceResponse
	(*FindByIdRequest)(nil),         // 15: com.mapr.data.db.FindByIdRequest
	(*FindByIdResponse)(nil),        // 16: com.mapr.data.db.FindByIdResponse
	(*FindRequest)(nil),             // 17: com.mapr.data.db.FindRequest
	(*FindResponse)(nil),            // 18: com.mapr.data.db.FindResponse
	(*UpdateRequest)(nil),           // 19: com.mapr.data.db.UpdateRequest
	(*UpdateResponse)(nil),          // 20: com.mapr.data.db.UpdateResponse
	(*DeleteRequest)(nil),           // 21: com.mapr.data.db.DeleteRequest
	(*DeleteResponse)(nil),          // 22: com.mapr.data.db.DeleteResponse
}
var file_maprdb_server_proto_depIdxs = []int32{
	0,  // 0: com.mapr.data.db.RpcError.err_code:type_name -> com.mapr.data.db.ErrorCode
	4,  // 1: com.mapr.data.db.CreateTableResponse.error:type_name -> com.mapr.data.db.RpcError
	4,  // 2: com.mapr.data.db.DeleteTableResponse.error:type_name -> com.mapr.data.db.RpcError
	4,  // 3: com.mapr.data.db.TableExistsResponse.error:type_name -> com.mapr.data.db.RpcError
	2,  // 4: com.mapr.data.db.InsertOrReplaceRequest.insert_mode:type_name -> com.mapr.data.db.InsertMode
	1,  // 5: com.mapr.data.db.InsertOrReplaceRequest.payload_encoding:type_name -> com.mapr.data.db.PayloadEncoding
	4,  // 6: com.mapr.data.db.InsertOrReplaceResponse.error:type_name -> com.mapr.data.db.RpcError
	1,  // 7: com.mapr.data.db.FindByIdRequest.payload_encoding:type_name -> com.mapr.data.db.PayloadEncoding
	4,  // 8: com.mapr.data.db.FindByIdResponse.error:type_name -> com.mapr.data.db.RpcError
	1,  // 9: com.mapr.data.db.FindByIdResponse.payload_encoding:type_name -> com.mapr.data.db.PayloadEncoding
	1,  // 10: com.mapr.data.db.FindRequest.payload_encoding:type_name -> com.mapr.data.db.PayloadEncoding
	4,  // 11: com.mapr.data.db.FindResponse.error:type_name -> com.mapr.data.db.RpcError
	1,  // 12: com.mapr.data.db.FindResponse.payload_encoding:type_name -> com.mapr.data.db.PayloadEncoding
	3,  // 13: com.mapr.data.db.FindResponse.type:type_name -> com.mapr.data.db.FindResponseType
	1,  // 14: com.mapr.data.db.UpdateRequest.payload_encoding:type_name -> com.mapr.data.db.PayloadEncoding
	4,  // 15: com.mapr.data.db.UpdateResponse.error:type_name -> com.mapr.data.db.RpcError
	1,  // 16: com.mapr.data.db.DeleteRequest.payload_encoding:type_name -> com.mapr.data.db.PayloadEncoding
	4,  // 17: com.mapr.data.db.DeleteResponse.error:type_name -> com.mapr.data.db.RpcError
	5,  // 18: com.mapr.data.db.MapRDbServer.Ping:input_type -> com.mapr.data.db.PingRequest
	7,  // 19: com.mapr.data.db.MapRDbServer.CreateTable:input_type -> com.mapr.data.db.CreateTableRequest
	9,  // 20: com.mapr.data.db.MapRDbServer.DeleteTable:input_type -> com.mapr.data.db.DeleteTableRequest
	11, // 21: com.mapr.data.db.MapRDbServer.TableExists:input_type -> com.mapr.data.db.TableExistsRequest
	13, // 22: com.mapr.data.db.MapRDbServer.InsertOrReplace:input_type -> com.mapr.data.db.InsertOrReplaceRequest
	15, // 23: com.mapr.data.db.MapRDbServer.FindById:input_type -> com.mapr.data.db.FindByIdRequest
	17, // 24: com.mapr.data.db.MapRDbServer.Find:input_type -> com.mapr.data.db.FindRequest
	19, // 25: com.mapr.data.db.MapRDbServer.Update:input_type -> com.mapr.data.db.UpdateRequest
	21, // 26: com.mapr.data.db.MapRDbServer.Delete:input_type -> com.mapr.data.db.DeleteRequest
	6,  // 27: com.mapr.data.db.MapRDbServer.Ping:output_type -> com.mapr.data.db.PingResponse
	8,  // 28: com.mapr.data.db.MapRDbServer.CreateTable:output_type -> com.mapr.data.db.CreateTableResponse
	10, // 29: com.mapr.data.db.MapRDbServer.DeleteTable:output_type -> com.mapr.data.db.DeleteTableResponse
	12, // 30: com.mapr.data.db.MapRDbServer.TableExists:output_type -> com.mapr.data.db.TableExistsResponse
	14, // 31: com.mapr.data.db.MapRDbServer.InsertOrReplace:output_type -> com.mapr.data.db.InsertOrReplaceResponse
	16, // 32: com.mapr.data.db.MapRDbServer.FindById:output_type -> com.mapr.data.db.FindByIdResponse
	18, // 33: com.mapr.data.db.MapRDbServer.Find:output_type -> com.mapr.data.db.FindResponse
	20, // 34: com.mapr.data.db.MapRDbServer.Update:output_type -> com.mapr.data.db.UpdateResponse
	22, // 35: com.mapr.data.db.MapRDbServer.Delete:output_type -> com.mapr.data.db.DeleteResponse
	27, // [27:36] is the sub-list for method output_type
	18, // [18:27] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_maprdb_server_proto_init() }
func file_maprdb_server_proto_init() {
	if File_maprdb_server_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_maprdb_server_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RpcError); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PingResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreateTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteTableResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableExistsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableExistsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertOrReplaceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InsertOrReplaceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindByIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FindResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_maprdb_server_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_maprdb_server_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*InsertOrReplaceRequest_JsonCondition)(nil),
		(*InsertOrReplaceRequest_JsonDocument)(nil),
	}
	file_maprdb_server_proto_msgTypes[11].OneofWrappers = []interface{}{
		(*FindByIdRequest_JsonCondition)(nil),
		(*FindByIdRequest_JsonDocument)(nil),
	}
	file_maprdb_server_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*FindByIdResponse_JsonDocument)(nil),
	}
	file_maprdb_server_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*FindRequest_JsonQuery)(nil),
	}
	file_maprdb_server_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*FindResponse_JsonResponse)(nil),
	}
	file_maprdb_server_proto_msgTypes[15].OneofWrappers = []interface{}{
		(*UpdateRequest_JsonDocument)(nil),
		(*UpdateRequest_JsonCondition)(nil),
		(*UpdateRequest_JsonMutation)(nil),
	}
	file_maprdb_server_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*DeleteRequest_JsonCondition)(nil),
		(*DeleteRequest_JsonDocument)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_maprdb_server_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_maprdb_server_proto_goTypes,
		DependencyIndexes: file_maprdb_server_proto_depIdxs,
		EnumInfos:         file_maprdb_server_proto_enumTypes,
		MessageInfos:      file_maprdb_server_proto_msgTypes,
	}.Build()
	File_maprdb_server_proto = out.File
	file_maprdb_server_proto_rawDesc = nil
	file_maprdb_server_proto_goTypes = nil
	file_maprdb_server_proto_depIdxs = nil
}
